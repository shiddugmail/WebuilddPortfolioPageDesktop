const anime = require('animejs').default;

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(
          target,
          key,
          Object.getOwnPropertyDescriptor(source, key)
        );
      });
    }
  }
  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}

function _createForOfIteratorHelper(o, allowArrayLike) {
  var it;
  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (
      Array.isArray(o) ||
      (it = _unsupportedIterableToArray(o)) ||
      (allowArrayLike && o && typeof o.length === "number")
    ) {
      if (it) o = it;
      var i = 0;
      var F = function F() {};
      return {
        s: F,
        n: function n() {
          if (i >= o.length) return { done: true };
          return { done: false, value: o[i++] };
        },
        e: function e(_e2) {
          throw _e2;
        },
        f: F
      };
    }
    throw new TypeError(
      "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
    );
  }
  var normalCompletion = true,
    didErr = false,
    err;
  return {
    s: function s() {
      it = o[Symbol.iterator]();
    },
    n: function n() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function e(_e3) {
      didErr = true;
      err = _e3;
    },
    f: function f() {
      try {
        if (!normalCompletion && it["return"] != null) it["return"]();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}

function _slicedToArray(arr, i) {
  return (
    _arrayWithHoles(arr) ||
    _iterableToArrayLimit(arr, i) ||
    _unsupportedIterableToArray(arr, i) ||
    _nonIterableRest()
  );
}

function _nonIterableRest() {
  throw new TypeError(
    "Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
  );
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}

function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;
  try {
    for (
      var _i = arr[Symbol.iterator](), _s;
      !(_n = (_s = _i.next()).done);
      _n = true
    ) {
      _arr.push(_s.value);
      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }
  return _arr;
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
} 

var sides_opposites = {
  left: "right",
  right: "left",
  top: "bottom",
  bottom: "top"
};
var sides_containers = {
  left: "width",
  right: "width",
  top: "height",
  bottom: "height"
};
var containers = ["height", "width"];

function normalize_to_percent_and_offset(value) {
  var percent = 0.0;
  var pixel_offset = 0;
  var calc_match = value.match(/calc\(\s*([0-9.]*)%\s*([-+])\s*([0-9]*)px/);

  if (calc_match) {
    percent = parseFloat(calc_match[1]);
    pixel_offset = parseInt(calc_match[3]);

    if (calc_match[2] === "-") {
      pixel_offset = -pixel_offset;
    }
  } else if (String(value).includes("%")) {
    percent = parseFloat(value.replace("%", ""));
  } else {
    pixel_offset = parseInt(value, 10);
  }

  return {
    percent: percent,
    pixel_offset: pixel_offset
  };
}

function to_relative_percent(element, property, value) {
  var offsetParent = element.offsetParent;

  if (!offsetParent) {
    return 0;
  }

  var target_style_property = property;

  if (sides_containers.hasOwnProperty(property)) {
    target_style_property = sides_containers[property];
  }

  var parent_size = Math.max(
    1,
    parseInt(getComputedStyle(offsetParent)[target_style_property], 10)
  );
  return parseFloat((100 * value) / parent_size);
}

function convert_to_matching_positioning(element, new_props) {
  var computed_element_style = getComputedStyle(element);
  Object.entries(new_props).forEach(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
      property = _ref2[0],
      value = _ref2[1];

    if (sides_opposites.hasOwnProperty(property)) {
      var to_percent = String(value).includes("%");
      var new_prop_value =
        parseInt(computed_element_style[property], 10) +
        parseInt(computed_element_style["margin-" + property], 10);

      if (to_percent) {
        new_prop_value =
          to_relative_percent(element, property, new_prop_value).toFixed(4) +
          "%";
      } else {
        new_prop_value += "px";
      }

      element.style[property] = new_prop_value;
      element.style["margin-" + property] = 0;
      element.style["margin-" + sides_opposites[property]] = 0;

      if (element.style[sides_opposites[property]]) {
        element.style[sides_opposites[property]] = "auto";
      }
    } else if (containers.includes(property)) {
      var _to_percent = String(value).includes("%");

      var _new_prop_value = parseInt(computed_element_style[property]);

      if (_to_percent) {
        _new_prop_value =
          to_relative_percent(element, property, _new_prop_value).toFixed(4) +
          "%";
      } else {
        _new_prop_value += "px";
      }

      element.style[property] = _new_prop_value;
    }
  });
}

function setup_listener(root_element, listener_specs, event_handler) {
  var cleaner = null;

  if (listener_specs.listener_type === "timer") {
    var timeout = setTimeout(event_handler, listener_specs.delay);

    cleaner = function cleaner() {
      return clearTimeout(timeout);
    };
  } else if (
    ["click", "mouseenter", "mouseleave"].includes(listener_specs.listener_type)
  ) {
    var target_element =
      listener_specs.target_selector === ""
        ? root_element
        : root_element.querySelector(listener_specs.target_selector);

    if (!target_element) {
      return function () {};
    }

    var event_handler_fixed = function event_handler_fixed(event) {
      if (event.type === "click" || event.target === target_element) {
        event.stopPropagation();
        event_handler();
      }
    };

    target_element.classList.add("listeners-active");

    if (listener_specs.listener_type === "click") {
      target_element.classList.add("listeners-active-click");
    }

    target_element.addEventListener(
      listener_specs.listener_type,
      event_handler_fixed,
      true
    );

    cleaner = function cleaner() {
      target_element.removeEventListener(
        listener_specs.listener_type,
        event_handler_fixed,
        true
      );
      target_element.classList.remove("listeners-active");
      target_element.classList.remove("listeners-active-click");
    };
  }

  return cleaner;
}

function animate_elements(
  root_element,
  selector_to_properties_map,
  transition_props,
  on_done
) {
  var from_current_position =
    arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
  var hide_low_opacity =
    arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;
  var entries = selector_to_properties_map.entries
    ? selector_to_properties_map.entries()
    : Object.entries(selector_to_properties_map);

  var _iterator = _createForOfIteratorHelper(entries),
    _step;

  try {
    var _loop = function _loop() {
      var _step$value = _slicedToArray(_step.value, 2),
        selector_or_element = _step$value[0],
        prop_values_map = _step$value[1];

      var element = root_element;

      if (typeof selector_or_element === "string") {
        if (selector_or_element !== "") {
          element = root_element.querySelector(selector_or_element);
        }
      } else {
        element = selector_or_element;
      }

      if (element) {
        var update_element_visibility = function update_element_visibility(
          visible
        ) {
          if (visible) {
            element.classList.toggle("hidden", false);
          } else {
            element.classList.toggle("hidden", true);
          }
        };

        if (hide_low_opacity) {
          update_element_visibility(
            prop_values_map["opacity"] > 0 ||
              getComputedStyle(element).opacity > 0.001
          );
        }
        anime.remove(element);

        var full_params = _objectSpread(
          _objectSpread(_objectSpread({}, transition_props), prop_values_map),
          {},
          {
            targets: [element],
            complete: function complete() {
              if (hide_low_opacity) {
                update_element_visibility(
                  getComputedStyle(element).opacity > 0.001
                );
              }

              if (on_done) {
                on_done(element);
              }
            }
          }
        );

        if (prop_values_map.hasOwnProperty("transform")) {
          var transform_val = full_params.transform;
          delete full_params.transform;

          if (!Array.isArray(transform_val)) {
            transform_val
              .match(/\S*\([^)]*/g)
              .map(function (x) {
                return x.split("(");
              })
              .forEach(function (_ref3) {
                var _ref4 = _slicedToArray(_ref3, 2),
                  key = _ref4[0],
                  val = _ref4[1];

                full_params[key] = val;
              });
          }
        }

        if (full_params.hasOwnProperty("easing")) {
          var mapping = {
            "": "linear",
            none: "linear",
            bounce: "easeOutBounce",
            "wind-up": "cubicBezier(0.4, -0.25, 0.8, 0.8)",
            snap: "cubicBezier(0.8, 0.85, 0.7, 1.15)",
            "ease-in-out": "cubicBezier(0.42, 0, 0.58, 1)",
            "ease-in": "cubicBezier(0.42, 0, 1, 1)",
            "ease-out": "cubicBezier(0, 0, 0.58, 1)"
          };
          var easing = full_params["easing"].trim().toLowerCase();

          if (mapping.hasOwnProperty(easing)) {
            easing = mapping[easing];
          } else if (easing.startsWith("cubic-bezier")) {
            easing = easing.replace("cubic-bezier", "cubicBezier");
          }

          full_params["easing"] = easing;
        }

        if (from_current_position) {
          convert_to_matching_positioning(element, full_params);
          Object.keys(sides_opposites).forEach(function (side) {
            if (full_params.hasOwnProperty(side)) {
              var value = full_params[side];

              var _normalize_to_percent = normalize_to_percent_and_offset(
                  value
                ),
                percent = _normalize_to_percent.percent,
                pixel_offset = _normalize_to_percent.pixel_offset;

              if (Math.abs(percent) < 0.001) {
                full_params[side] = pixel_offset + "px";
              } else {
                full_params[side] = percent + "%";
                full_params["margin-" + side] = pixel_offset + "px";
              }

              element.style[sides_opposites[side]] = "auto";
            }
          });
          containers.forEach(function (container) {
            if (full_params.hasOwnProperty(container)) {
              var value = full_params[container];

              var _normalize_to_percent2 = normalize_to_percent_and_offset(
                  value
                ),
                percent = _normalize_to_percent2.percent,
                pixel_offset = _normalize_to_percent2.pixel_offset;

              if (Math.abs(percent) < 0.001) {
                full_params[container] = pixel_offset + "px";
              } else {
                if (Math.abs(pixel_offset) > 0) {
                  percent += to_relative_percent(
                    element,
                    container,
                    pixel_offset
                  );
                  percent = Math.max(0, percent);
                }

                full_params[container] = percent + "%";
              }
            }
          });
        }
        anime(full_params);
      }
    };

    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
      _loop();
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}

function timeline_get_changed_properties_between_states(
  initial_element_state,
  from_state_element_state,
  to_state_element_state
) {
  var selector_to_props = {};
  Object.entries(from_state_element_state).forEach(function (_ref5) {
    var _ref6 = _slicedToArray(_ref5, 2),
      selector = _ref6[0],
      properties = _ref6[1];

    selector_to_props[selector] = selector_to_props[selector] || {};
    Object.entries(properties).forEach(function (_ref7) {
      var _ref8 = _slicedToArray(_ref7, 2),
        property = _ref8[0],
        value = _ref8[1];

      selector_to_props[selector][property] =
        initial_element_state[selector][property];
    });
  });
  Object.entries(to_state_element_state).forEach(function (_ref9) {
    var _ref10 = _slicedToArray(_ref9, 2),
      selector = _ref10[0],
      properties = _ref10[1];

    selector_to_props[selector] = selector_to_props[selector] || {};
    Object.entries(properties).forEach(function (_ref11) {
      var _ref12 = _slicedToArray(_ref11, 2),
        property = _ref12[0],
        value = _ref12[1];

      selector_to_props[selector][property] = value;
    });
  });
  return selector_to_props;
}

function timeline_transitioning_to_state(
  root_element,
  initial_properties,
  states_flow,
  now_state_name,
  transition_animation_time
) {
  var new_state_flow = states_flow[now_state_name];
  var listener_cleanup_callbacks = [];

  var _iterator2 = _createForOfIteratorHelper(new_state_flow.listeners),
    _step2;

  try {
    var _loop2 = function _loop2() {
      var listener_specs = _step2.value;

      function on_listener_run() {
        listener_cleanup_callbacks.forEach(function (callback) {
          return callback();
        });
        listener_cleanup_callbacks = [];
        var next_state_name = listener_specs.change_to_state;
        var this_state_element_state = states_flow[now_state_name].overrides;
        var next_state_element_state = states_flow[next_state_name].overrides;
        var element_selector_to_changed_properties = timeline_get_changed_properties_between_states(
          initial_properties,
          this_state_element_state,
          next_state_element_state
        );
        var longest_animation_time_ms = 0;
        Object.entries(listener_specs.animations).forEach(function (_ref13) {
          var _ref14 = _slicedToArray(_ref13, 2),
            selector = _ref14[0],
            animation_specs = _ref14[1];

          var filtered_props = {};

          if (element_selector_to_changed_properties.hasOwnProperty(selector)) {
            filtered_props[selector] =
              element_selector_to_changed_properties[selector];
            longest_animation_time_ms = Math.max(
              longest_animation_time_ms,
              animation_specs.delay + animation_specs.duration
            );
            animate_elements(root_element, filtered_props, animation_specs);
          }
        });
        timeline_transitioning_to_state(
          root_element,
          initial_properties,
          states_flow,
          next_state_name,
          longest_animation_time_ms
        );
      }

      var final_listener_specs = _objectSpread({}, listener_specs);

      if (listener_specs.listener_type === "timer") {
        final_listener_specs.delay += transition_animation_time;
      }

      var cleanup_callback = setup_listener(
        root_element,
        final_listener_specs,
        on_listener_run
      );
      listener_cleanup_callbacks.push(cleanup_callback);
    };

    for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
      _loop2();
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
}

function timeline_load_initial_values(components) {
  components.forEach(function (component) {
    var root_element = document.querySelector(component.root_element);
    var states_flow = component.states_flow;
    var initial_state_name = component.initial_state_name;
    var initial_properties = {};
    Object.values(component.states_flow).forEach(function (state_spec) {
      Object.entries(state_spec.overrides).forEach(function (_ref15) {
        var _ref16 = _slicedToArray(_ref15, 2),
          selector = _ref16[0],
          properties = _ref16[1];

        initial_properties[selector] = initial_properties[selector] || {};
        var element =
          selector === "" ? root_element : root_element.querySelector(selector);
        Object.keys(properties).forEach(function (property) {
          initial_properties[selector][property] =
            element.style[property] ||
            (property === "transform" && "rotate(0deg)") ||
            window.getComputedStyle(element)[property];
        });
      });
    });
    Object.entries(component.states_flow[initial_state_name].overrides).forEach(
      function (_ref17) {
        var _ref18 = _slicedToArray(_ref17, 2),
          selector = _ref18[0],
          properties = _ref18[1];

        var element =
          selector === "" ? root_element : root_element.querySelector(selector);
        animate_elements(
          element,
          {
            "": properties
          },
          {
            duration: 0
          }
        );
      }
    );
    timeline_transitioning_to_state(
      root_element,
      initial_properties,
      states_flow,
      initial_state_name,
      0
    );
  });
  document.querySelectorAll(".not-ready").forEach(function (x) {
    return x.classList.remove("not-ready");
  });
}

module.exports = {
  loadTimelineData: timeline_load_initial_values
}
